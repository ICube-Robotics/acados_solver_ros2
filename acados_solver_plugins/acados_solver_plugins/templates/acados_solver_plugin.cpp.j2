// Copyright 2023 ICUBE Laboratory, University of Strasbourg
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Thibault Poignonec (tpoignonec@unistra.fr)

#include <iostream>
#include <string>

#include "acados_solver_base/acados_solver.hpp"
#include "{{plugin_class_name | uppercase_to_underscore}}.hpp"

// Include auto-generated Acados C-code
#include "generated_c_code/acados_solver_{{solver_c_prefix}}.h"
#include "generated_c_code/acados_sim_solver_{{solver_c_prefix}}.h"


namespace {{library_name}}
{

using namespace acados;

// Constructor
{{plugin_class_name}}::{{plugin_class_name}}()
{
  // Fill fixed problem dimensions
  // Main variables
  _dims.nx = {{solver_c_prefix|upper}}_NX;
  _dims.nz = {{solver_c_prefix|upper}}_NZ;
  _dims.np = {{solver_c_prefix|upper}}_NP;
  _dims.nu = {{solver_c_prefix|upper}}_NU;
  // Constraints
  _dims.nbx = {{solver_c_prefix|upper}}_NBX;
  _dims.nbx_0 = {{solver_c_prefix|upper}}_NBX0;
  _dims.nbx_N = {{solver_c_prefix|upper}}_NBXN;
  _dims.nbu = {{solver_c_prefix|upper}}_NBU;
  _dims.ng = {{solver_c_prefix|upper}}_NG;
  _dims.ng_N = {{solver_c_prefix|upper}}_NGN;
  // Non-linear constraints
  _dims.nh = {{solver_c_prefix|upper}}_NH;
  _dims.nh_N = {{solver_c_prefix|upper}}_NHN;
  _dims.nphi = {{solver_c_prefix|upper}}_NPHI;
  _dims.nphi_N = {{solver_c_prefix|upper}}_NPHIN;
  _dims.nr = {{solver_c_prefix|upper}}_NR;
  // Slack
  _dims.ns = {{solver_c_prefix|upper}}_NS;
  _dims.ns_N = {{solver_c_prefix|upper}}_NSN;
  _dims.nsbx = {{solver_c_prefix|upper}}_NSBX;
  _dims.nsbx_N = {{solver_c_prefix|upper}}_NSBXN;
  _dims.nsbu = {{solver_c_prefix|upper}}_NSBU;
  _dims.nsh = {{solver_c_prefix|upper}}_NSH;
  _dims.nsh_N = {{solver_c_prefix|upper}}_NSHN;
  _dims.nsg = {{solver_c_prefix|upper}}_NSG;
  _dims.nsg_N = {{solver_c_prefix|upper}}_NSGN;
  _dims.nsphi = {{solver_c_prefix|upper}}_NSPHI;
  _dims.nsphi_N = {{solver_c_prefix|upper}}_NSPHIN;
  // Corst reference
  _dims.ny = {{solver_c_prefix|upper}}_NY;
  _dims.ny_0 = {{solver_c_prefix|upper}}_NY0;
  _dims.ny_N = {{solver_c_prefix|upper}}_NYN;
}
{{plugin_class_name}}::~{{plugin_class_name}}()
{
  free_memory();
}

int {{plugin_class_name}}::create_index_maps()
{
  // Clear all
  _x_index_map.clear();
  _z_index_map.clear();
  _p_index_map.clear();
  _u_index_map.clear();

  // Differential state variables
  {%- for var_name, var_indexes in x_index_map.items() %}
  _x_index_map[std::string("{{var_name}}")] = {{var_indexes | curly_bracket_list}};
  {%- endfor %}

  // Algebraic state variables
  {%- for var_name, var_indexes in z_index_map.items() %}
  _z_index_map[std::string("{{var_name}}")] = {{var_indexes | curly_bracket_list}};
  {%- endfor %}

  // Runtime parameters
  {%- for var_name, var_indexes in p_index_map.items() %}
  _p_index_map[std::string("{{var_name}}")] = {{var_indexes | curly_bracket_list}};
  {%- endfor %}

  // Control variables
  {%- for var_name, var_indexes in u_index_map.items() %}
  _u_index_map[std::string("{{var_name}}")] = {{var_indexes | curly_bracket_list}};
  {%- endfor %}

  return 0;
}

int {{plugin_class_name}}::internal_create_capsule()
{
  _capsule = {{solver_c_prefix|lower}}_acados_create_capsule();
  _capsule_sim = {{solver_c_prefix|lower}}_acados_sim_solver_create_capsule();
  return (_capsule) ? 0 : -1;
}
int {{plugin_class_name}}::internal_create_with_discretization(
  int n_time_steps,
  double * new_time_steps)
{
  int ret = {{solver_c_prefix|lower}}_acados_create_with_discretization(_capsule, n_time_steps, new_time_steps);
  ret += {{solver_c_prefix|lower}}_acados_sim_create(_capsule_sim);
  return ret;
}
int {{plugin_class_name}}::internal_reset(int reset_qp_solver_mem)
{
  return {{solver_c_prefix|lower}}_acados_reset(_capsule, reset_qp_solver_mem);
}
int {{plugin_class_name}}::internal_free()
{
  int ret = {{solver_c_prefix|lower}}_acados_free(_capsule);
  ret += {{solver_c_prefix|lower}}_acados_sim_free(_capsule_sim);
  return ret;
}
int {{plugin_class_name}}::internal_free_capsule()
{
  int ret = {{solver_c_prefix|lower}}_acados_free_capsule(_capsule);
  ret += {{solver_c_prefix|lower}}_acados_sim_solver_free_capsule(_capsule_sim);
  return ret;
}

int {{plugin_class_name}}::internal_update_qp_solver_cond_N(int qp_solver_cond_N)
{
  return {{solver_c_prefix|lower}}_acados_update_qp_solver_cond_N(_capsule, qp_solver_cond_N);
}
int {{plugin_class_name}}::internal_update_params(unsigned int stage, double * value, int np)
{
  return {{solver_c_prefix|lower}}_acados_update_params(_capsule, static_cast<int>(stage), value, np);
}
int {{plugin_class_name}}::internal_update_params_sparse(unsigned int stage, int * idx, double * p, int n_update)
{
  return {{solver_c_prefix|lower}}_acados_update_params_sparse(_capsule, static_cast<int>(stage), idx, p, n_update);
}
int {{plugin_class_name}}::internal_solve()
{
  return {{solver_c_prefix|lower}}_acados_solve(_capsule);
}
void {{plugin_class_name}}::internal_print_stats() const
{
  return {{solver_c_prefix|lower}}_acados_print_stats(_capsule);
}

ocp_nlp_in * {{plugin_class_name}}::get_nlp_in() const
{
  return {{solver_c_prefix|lower}}_acados_get_nlp_in(_capsule);
}

ocp_nlp_out * {{plugin_class_name}}::get_nlp_out() const
{
  return {{solver_c_prefix|lower}}_acados_get_nlp_out(_capsule);
}

ocp_nlp_out * {{plugin_class_name}}::get_sens_out() const
{
  return {{solver_c_prefix|lower}}_acados_get_sens_out(_capsule);
}
ocp_nlp_solver * {{plugin_class_name}}::get_nlp_solver() const
{
  return {{solver_c_prefix|lower}}_acados_get_nlp_solver(_capsule);
}
ocp_nlp_config * {{plugin_class_name}}::get_nlp_config() const
{
  return {{solver_c_prefix|lower}}_acados_get_nlp_config(_capsule);
}
void * {{plugin_class_name}}::get_nlp_opts() const
{
  return {{solver_c_prefix|lower}}_acados_get_nlp_opts(_capsule);
}
ocp_nlp_dims * {{plugin_class_name}}::get_nlp_dims() const
{
  return {{solver_c_prefix|lower}}_acados_get_nlp_dims(_capsule);
}
ocp_nlp_plan_t * {{plugin_class_name}}::get_nlp_plan() const
{
  return {{solver_c_prefix|lower}}_acados_get_nlp_plan(_capsule);
}
unsigned int {{plugin_class_name}}::get_nlp_np() const
{
  return _capsule->nlp_np;
}

int {{plugin_class_name}}::internal_simulate(
  double dt /* Time step */,
  double * x0 /* Differential state initial value */,
  double * u0 /* Applied controls */,
  double * p /* Runtime parameters */,
  double * x_next /* Differential state next value */,
  double * z_next /* Algebraic state next value */)
{
  if (dt <= 0.0) {
    std::cerr
      << "Error in {{plugin_class_name}}::simulate: Invalid time step, got "
      << dt << std::endl;
    return 10; // Error: Invalid time step
  }
  if (x0 == nullptr || u0 == nullptr || p == nullptr || x_next == nullptr || z_next == nullptr) {
    return 11; // Error: Null pointer passed to simulate function
  }
  if (_capsule_sim == nullptr) {
    return 12; // Error: Simulation capsule not created
  }

  // Allocate return flag
  int ret = 0;

  // Set state and control initial values
  sim_solver_set(_capsule_sim->acados_sim_solver, "x", x0);
  sim_solver_set(_capsule_sim->acados_sim_solver, "u", u0);

  // Set parameters
  ret = {{solver_c_prefix|lower}}_acados_sim_update_params(_capsule_sim, p, _dims.np);
  if (ret != 0) {
    std::cerr << "Error in {{plugin_class_name}}::simulate: Failed to update parameters." << std::endl;
    return ret;
  }

  // Simulate
  ret = {{solver_c_prefix|lower}}_acados_sim_solve(_capsule_sim);
  if (ret != 0) {
    std::cerr << "Error in {{plugin_class_name}}::simulate: Simulation solve failed." << std::endl;
  }

  // Get next state and algebraic state
  sim_out_get(
    {{solver_c_prefix|lower}}_acados_get_sim_config(_capsule_sim),
    {{solver_c_prefix|lower}}_acados_get_sim_dims(_capsule_sim),
    {{solver_c_prefix|lower}}_acados_get_sim_out(_capsule_sim),
    "x", x_next
  );
  sim_out_get(
    {{solver_c_prefix|lower}}_acados_get_sim_config(_capsule_sim),
    {{solver_c_prefix|lower}}_acados_get_sim_dims(_capsule_sim),
    {{solver_c_prefix|lower}}_acados_get_sim_out(_capsule_sim),
    "z", z_next
  );
  return ret;
}

}  // namespace {{library_name}}

{%- if export_plugin %}

#include <pluginlib/class_list_macros.hpp>
PLUGINLIB_EXPORT_CLASS({{library_name}}::{{plugin_class_name}}, acados::AcadosSolver)
{%- endif %}
